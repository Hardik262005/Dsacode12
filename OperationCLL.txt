#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = newNode;  // Points to itself initially in a circular list
    return newNode;
}

void insertNode(struct Node** head, int value) {
    struct Node* newNode = createNode(value);

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* last = (*head)->next;
        while (last->next != *head) {
            last = last->next;
        }
        last->next = newNode;
        newNode->next = *head;
    }
}

void deleteNode(struct Node** head, int value) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node* temp = *head;
    struct Node* prev = NULL;

    // Find the node with the specified value
    while (temp->data != value) {
        if (temp->next == *head) {
            printf("Value %d not found in the list\n", value);
            return;
        }
        prev = temp;
        temp = temp->next;
    }

    // If the node to be deleted is the only node in the list
    if (temp->next == *head) {
        *head = NULL;
    } else if (temp == *head) {  // If the node is the first node
        prev = (*head)->next;
        while (prev->next != *head) {
            prev = prev->next;
        }
        *head = (*head)->next;
        prev->next = *head;
    } else {  // Node is in the middle
        prev->next = temp->next;
    }

    free(temp);
}

void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node* temp = head;
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);

    printf("\n");
}

int main() {
    struct Node* head = NULL;

    insertNode(&head, 1);
    insertNode(&head, 2);
    insertNode(&head, 3);

    printf("Circular Linked List: ");
    displayList(head);

    deleteNode(&head, 2);

    printf("Circular Linked List after deletion: ");
    displayList(head);

    return 0;
}